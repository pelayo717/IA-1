(defpackage	:2311_P08_ef12d
	(:use :common-lisp :conecta4)
	(:export :heuristica :*alias*))
	
(in-package	2311_P08_ef12d)

(defvar *alias* 'Mormont)


(defun prueba8 (estado)
	(let* ((tablero (estado-tablero estado))
	 (ficha-actual (estado-turno estado))
	 (ficha-oponente (siguiente-jugador ficha-actual))) 
    (if (juego-terminado-p estado)
	(let ((ganador (ganador estado)))
	  (cond ((not ganador) 0)
		((eql ganador ficha-actual) +val-max+)
		(t +val-min+)))
      (let ((puntuacion-actual 0)
	    (puntuacion-oponente 0))
	(loop for columna from 0 below (tablero-ancho tablero) do
	      (let* ((altura (altura-columna tablero columna))
		     (fila (1- altura))
		     (abajo (contar-abajo tablero ficha-actual columna fila))
		     (arriba (contar-arriba tablero ficha-actual columna fila))
		     (der (contar-derecha tablero ficha-actual columna fila))
		     (izq (contar-izquierda tablero ficha-actual columna fila))
		     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
		     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
		     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
		     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila)))
		(setf puntuacion-actual
		      (+ puntuacion-actual
			 (cond ((= abajo 0) 0)
			       ((= abajo 1) 15)
			       ((= abajo 2) 500)
			       ((= abajo 3) 3500))
			 (cond ((= arriba 0) 0)
			       ((= arriba 1) 15)
			       ((= arriba 2) 500)
			       ((= arriba 3) 3500))
			 (cond ((= der 0) 0)
			       ((= der 1) 15)
			       ((= der 2) 500)
			       ((= der 3) 3500))
			 (cond ((= izq 0) 0)
			       ((= izq 1) 15)
			       ((= izq 2) 500)
			       ((= izq 3) 3500))
			 (cond ((= abajo-izq 0) 0)
			       ((= abajo-izq 1) 15)
			       ((= abajo-izq 2) 500)
			       ((= abajo-izq 3) 3500))
			 (cond ((= abajo-der 0) 0)
			       ((= abajo-der 1) 15)
			       ((= abajo-der 2) 500)
			       ((= abajo-der 3) 3500))
			 (cond ((= arriba-der 0) 0)
			       ((= arriba-der 1) 15)
			       ((= arriba-der 2) 500)
			       ((= arriba-der 3) 3500))
			 (cond ((= arriba-izq 0) 0)
			       ((= arriba-izq 1) 15)
			       ((= arriba-izq 2) 500)
			       ((= arriba-izq 3) 3500))
			 )))
	      (let* ((altura (altura-columna tablero columna))
		     (fila (1- altura))
		     (abajo (contar-abajo tablero ficha-oponente columna fila))
		     (arriba (contar-arriba tablero ficha-actual columna fila))
		     (der (contar-derecha tablero ficha-oponente columna fila))
		     (izq (contar-izquierda tablero ficha-oponente columna fila))
		     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
		     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
		     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
		     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila))
		     )
		(setf puntuacion-oponente
		      (+ puntuacion-oponente
			 (cond ((= abajo 0) 0)
			       ((= abajo 1) 10)
			       ((= abajo 2) 200)
			       ((= abajo 3) 1900))
			 (cond ((= arriba 0) 0)
			       ((= arriba 1) 10)
			       ((= arriba 2) 200)
			       ((= arriba 3) 1900))
			 (cond ((= der 0) 0)
			       ((= der 1) 10)
			       ((= der 2) 200)
			       ((= der 3) 1900))
			 (cond ((= izq 0) 0)
			       ((= izq 1) 10)
			       ((= izq 2) 200)
			       ((= izq 3) 1900))
			 (cond ((= abajo-izq 0) 0)
			       ((= abajo-izq 1) 10)
			       ((= abajo-izq 2) 200)
			       ((= abajo-izq 3) 2500))
			 (cond ((= abajo-der 0) 0)
			       ((= abajo-der 1) 10)
			       ((= abajo-der 2) 200)
			       ((= abajo-der 3) 2500))
			 (cond ((= arriba-der 0) 0)
			       ((= arriba-der 1) 10)
			       ((= arriba-der 2) 200)
			       ((= arriba-der 3) 2500))
			 (cond ((= arriba-izq 0) 0)
			       ((= arriba-izq 1) 10)
			       ((= arriba-izq 2) 200)
			       ((= arriba-izq 3) 2500))
			 ))))
	(- puntuacion-actual puntuacion-oponente)))))

(defun heuristica (estado)
	(prueba8 estado))